//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;

namespace ACSMinCapture.DataBase.Model
{
    public partial class Entitiessqql : ObjectContext
    {
        public const string ConnectionString = "name=Entities";
        public const string ContainerName = "Entities";
    
        #region Constructors
    
        public Entitiessqql()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public Entitiessqql(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }

        public Entitiessqql(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<GEDPessoas> GEDPessoas
        {
            get { return _gEDPessoas  ?? (_gEDPessoas = CreateObjectSet<GEDPessoas>("GEDPessoas")); }
        }
        private ObjectSet<GEDPessoas> _gEDPessoas;
    
        public ObjectSet<GEDDivisoes> GEDDivisoes
        {
            get { return _gEDDivisoes  ?? (_gEDDivisoes = CreateObjectSet<GEDDivisoes>("GEDDivisoes")); }
        }
        private ObjectSet<GEDDivisoes> _gEDDivisoes;
    
        public ObjectSet<GEDDocumentos> GEDDocumentos
        {
            get { return _gEDDocumentos  ?? (_gEDDocumentos = CreateObjectSet<GEDDocumentos>("GEDDocumentos")); }
        }
        private ObjectSet<GEDDocumentos> _gEDDocumentos;
    
        public ObjectSet<GEDFormatos> GEDFormatos
        {
            get { return _gEDFormatos  ?? (_gEDFormatos = CreateObjectSet<GEDFormatos>("GEDFormatos")); }
        }
        private ObjectSet<GEDFormatos> _gEDFormatos;
    
        public ObjectSet<GEDPassagens> GEDPassagens
        {
            get { return _gEDPassagens  ?? (_gEDPassagens = CreateObjectSet<GEDPassagens>("GEDPassagens")); }
        }
        private ObjectSet<GEDPassagens> _gEDPassagens;
    
        public ObjectSet<GEDSubTiposDocumentos> GEDSubTiposDocumentos
        {
            get { return _gEDSubTiposDocumentos  ?? (_gEDSubTiposDocumentos = CreateObjectSet<GEDSubTiposDocumentos>("GEDSubTiposDocumentos")); }
        }
        private ObjectSet<GEDSubTiposDocumentos> _gEDSubTiposDocumentos;
    
        public ObjectSet<GEDTiposBuscaLotes> GEDTiposBuscaLotes
        {
            get { return _gEDTiposBuscaLotes  ?? (_gEDTiposBuscaLotes = CreateObjectSet<GEDTiposBuscaLotes>("GEDTiposBuscaLotes")); }
        }
        private ObjectSet<GEDTiposBuscaLotes> _gEDTiposBuscaLotes;
    
        public ObjectSet<GEDTiposBuscaLotesPJ> GEDTiposBuscaLotesPJ
        {
            get { return _gEDTiposBuscaLotesPJ  ?? (_gEDTiposBuscaLotesPJ = CreateObjectSet<GEDTiposBuscaLotesPJ>("GEDTiposBuscaLotesPJ")); }
        }
        private ObjectSet<GEDTiposBuscaLotesPJ> _gEDTiposBuscaLotesPJ;
    
        public ObjectSet<GEDTiposDocumentos> GEDTiposDocumentos
        {
            get { return _gEDTiposDocumentos  ?? (_gEDTiposDocumentos = CreateObjectSet<GEDTiposDocumentos>("GEDTiposDocumentos")); }
        }
        private ObjectSet<GEDTiposDocumentos> _gEDTiposDocumentos;
    
        public ObjectSet<GEDCaptionControl> GEDCaptionControl
        {
            get { return _gEDCaptionControl  ?? (_gEDCaptionControl = CreateObjectSet<GEDCaptionControl>("GEDCaptionControl")); }
        }
        private ObjectSet<GEDCaptionControl> _gEDCaptionControl;
    
        public ObjectSet<GEDLogLogin> GEDLogLogin
        {
            get { return _gEDLogLogin  ?? (_gEDLogLogin = CreateObjectSet<GEDLogLogin>("GEDLogLogin")); }
        }
        private ObjectSet<GEDLogLogin> _gEDLogLogin;
    
        public ObjectSet<GEDStatusLote> GEDStatusLote
        {
            get { return _gEDStatusLote  ?? (_gEDStatusLote = CreateObjectSet<GEDStatusLote>("GEDStatusLote")); }
        }
        private ObjectSet<GEDStatusLote> _gEDStatusLote;
    
        public ObjectSet<GEDLotesXUsuarios> GEDLotesXUsuarios
        {
            get { return _gEDLotesXUsuarios  ?? (_gEDLotesXUsuarios = CreateObjectSet<GEDLotesXUsuarios>("GEDLotesXUsuarios")); }
        }
        private ObjectSet<GEDLotesXUsuarios> _gEDLotesXUsuarios;
    
        public ObjectSet<GEDUsuarios> GEDUsuarios
        {
            get { return _gEDUsuarios  ?? (_gEDUsuarios = CreateObjectSet<GEDUsuarios>("GEDUsuarios")); }
        }
        private ObjectSet<GEDUsuarios> _gEDUsuarios;

        #endregion

        #region Function Imports
        public ObjectResult<GED_PROC_F_Lotes_Result> GED_PROC_F_Lotes(Nullable<int> tipoPessoa, Nullable<int> tipo, string value, Nullable<System.DateTime> dtIni, Nullable<System.DateTime> dtFin, Nullable<int> idStatusLote)
        {
    
            ObjectParameter tipoPessoaParameter;
    
            if (tipoPessoa.HasValue)
            {
                tipoPessoaParameter = new ObjectParameter("TipoPessoa", tipoPessoa);
            }
            else
            {
                tipoPessoaParameter = new ObjectParameter("TipoPessoa", typeof(int));
            }
    
            ObjectParameter tipoParameter;
    
            if (tipo.HasValue)
            {
                tipoParameter = new ObjectParameter("Tipo", tipo);
            }
            else
            {
                tipoParameter = new ObjectParameter("Tipo", typeof(int));
            }
    
            ObjectParameter valueParameter;
    
            if (value != null)
            {
                valueParameter = new ObjectParameter("Value", value);
            }
            else
            {
                valueParameter = new ObjectParameter("Value", typeof(string));
            }
    
            ObjectParameter dtIniParameter;
    
            if (dtIni.HasValue)
            {
                dtIniParameter = new ObjectParameter("DtIni", dtIni);
            }
            else
            {
                dtIniParameter = new ObjectParameter("DtIni", typeof(System.DateTime));
            }
    
            ObjectParameter dtFinParameter;
    
            if (dtFin.HasValue)
            {
                dtFinParameter = new ObjectParameter("DtFin", dtFin);
            }
            else
            {
                dtFinParameter = new ObjectParameter("DtFin", typeof(System.DateTime));
            }
    
            ObjectParameter idStatusLoteParameter;
    
            if (idStatusLote.HasValue)
            {
                idStatusLoteParameter = new ObjectParameter("IdStatusLote", idStatusLote);
            }
            else
            {
                idStatusLoteParameter = new ObjectParameter("IdStatusLote", typeof(int));
            }
            return base.ExecuteFunction<GED_PROC_F_Lotes_Result>("GED_PROC_F_Lotes", tipoPessoaParameter, tipoParameter, valueParameter, dtIniParameter, dtFinParameter, idStatusLoteParameter);
        }
        public ObjectResult<GED_PROC_CodigosBarras_Result> GED_PROC_CodigosBarras(Nullable<int> tIPO, Nullable<int> sUB, string cODIGO)
        {
    
            ObjectParameter tIPOParameter;
    
            if (tIPO.HasValue)
            {
                tIPOParameter = new ObjectParameter("TIPO", tIPO);
            }
            else
            {
                tIPOParameter = new ObjectParameter("TIPO", typeof(int));
            }
    
            ObjectParameter sUBParameter;
    
            if (sUB.HasValue)
            {
                sUBParameter = new ObjectParameter("SUB", sUB);
            }
            else
            {
                sUBParameter = new ObjectParameter("SUB", typeof(int));
            }
    
            ObjectParameter cODIGOParameter;
    
            if (cODIGO != null)
            {
                cODIGOParameter = new ObjectParameter("CODIGO", cODIGO);
            }
            else
            {
                cODIGOParameter = new ObjectParameter("CODIGO", typeof(string));
            }
            return base.ExecuteFunction<GED_PROC_CodigosBarras_Result>("GED_PROC_CodigosBarras", tIPOParameter, sUBParameter, cODIGOParameter);
        }

        #endregion

    }
}
